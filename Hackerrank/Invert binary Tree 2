import java.util.*;
public class Solution {
    Node root;
    static class Node {
        int data;
        Node left, right;
        Node(int data)
        {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    public Node insertLevelOrder(ArrayList<Integer> arr, int i)
    {
          Node root = null;
        // Base case for recursion
        if (i < arr.size()) {
            root = new Node(arr.get(i));
  
            // insert left child
            root.left = insertLevelOrder(arr, 2 * i + 1);
  
            // insert right child
            root.right = insertLevelOrder(arr, 2 * i + 2);
        }
        return root;
    }
    public void inOrder(Node root)
    {
        if (root != null) {
            inOrder(root.left);
            System.out.print(root.data + " ");
            inOrder(root.right);
        }
    }
    public void preorder(Node root){
        if (root != null) {           
            System.out.print(root.data + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }
    public Node invert(Node root){
        if(root==null){return root;}
        Node left=invert(root.left);
        Node right=invert(root.right);
        root.left=right;
        root.right=left;
        return root;
    }
    // Driver program to test above function
    public static void main(String args[])
    {
        Solution t2 = new Solution();
        Scanner sc=new Scanner(System.in);
        ArrayList<Integer> arr=new ArrayList<>();
        while(true){
            int x=sc.nextInt();
            if(x==-1){break;}
            arr.add(x);
        }
        t2.root = t2.insertLevelOrder(arr, 0);
        //t2.preorder(t2.root);
        t2.invert(t2.root);
        //System.out.println("After inverting");
        t2.preorder(t2.root);
    }
}
